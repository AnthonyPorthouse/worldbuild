// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  
  email String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  worlds UsersOnWorlds[]
}

model UsersOnWorlds {
  user User @relation(fields: [userId], references: [id])
  userId String

  world World @relation(fields: [worldId], references: [id])
  worldId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, worldId])
}

model World {
  id String @id @default(uuid())

  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UsersOnWorlds[]
  pages Page[]
  categories Category[]
}

model Page {
  id String @id @default(uuid())

  world World @relation(fields: [worldId], references: [id])
  worldId String

  title String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocks Block[]

  categories Category[]

  @@unique([worldId, slug])
}

model Block {
  id String @id @default(uuid())

  page Page @relation(fields: [pageId], references: [id])
  pageId String

  content String
  revealed Boolean
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [pageId, order])
}

model Category {
  id String @id @default(uuid())

  world World @relation(fields: [worldId], references: [id])
  worldId String

  title String
  slug String

  pages Page[]

  @@unique([worldId, slug])
}